/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.tsfile.formatV30;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-16")
public class ValueInTimeSeriesChunkMetaDataV30 implements org.apache.thrift.TBase<ValueInTimeSeriesChunkMetaDataV30, ValueInTimeSeriesChunkMetaDataV30._Fields>, java.io.Serializable, Cloneable, Comparable<ValueInTimeSeriesChunkMetaDataV30> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValueInTimeSeriesChunkMetaDataV30");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("max_error", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_values", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValueInTimeSeriesChunkMetaDataV30StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValueInTimeSeriesChunkMetaDataV30TupleSchemeFactory();

  /**
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 data_type; // required
  public int max_error; // optional
  public DigestV30 digest; // optional
  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> enum_values; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DataTypeV30
     */
    DATA_TYPE((short)1, "data_type"),
    MAX_ERROR((short)2, "max_error"),
    DIGEST((short)3, "digest"),
    /**
     * If values of data consist of enum values, metadata will store all possible
     * values in time series
     */
    ENUM_VALUES((short)4, "enum_values");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // MAX_ERROR
          return MAX_ERROR;
        case 3: // DIGEST
          return DIGEST;
        case 4: // ENUM_VALUES
          return ENUM_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_ERROR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MAX_ERROR,_Fields.DIGEST,_Fields.ENUM_VALUES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTypeV30.class)));
    tmpMap.put(_Fields.MAX_ERROR, new org.apache.thrift.meta_data.FieldMetaData("max_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DigestV30.class)));
    tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enum_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValueInTimeSeriesChunkMetaDataV30.class, metaDataMap);
  }

  public ValueInTimeSeriesChunkMetaDataV30() {
  }

  public ValueInTimeSeriesChunkMetaDataV30(
    DataTypeV30 data_type)
  {
    this();
    this.data_type = data_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ValueInTimeSeriesChunkMetaDataV30(ValueInTimeSeriesChunkMetaDataV30 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetData_type()) {
      this.data_type = other.data_type;
    }
    this.max_error = other.max_error;
    if (other.isSetDigest()) {
      this.digest = new DigestV30(other.digest);
    }
    if (other.isSetEnum_values()) {
      java.util.List<java.lang.String> __this__enum_values = new java.util.ArrayList<java.lang.String>(other.enum_values);
      this.enum_values = __this__enum_values;
    }
  }

  public ValueInTimeSeriesChunkMetaDataV30 deepCopy() {
    return new ValueInTimeSeriesChunkMetaDataV30(this);
  }

  @Override
  public void clear() {
    this.data_type = null;
    setMax_errorIsSet(false);
    this.max_error = 0;
    this.digest = null;
    this.enum_values = null;
  }

  /**
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 getData_type() {
    return this.data_type;
  }

  /**
   * 
   * @see DataTypeV30
   */
  public ValueInTimeSeriesChunkMetaDataV30 setData_type(DataTypeV30 data_type) {
    this.data_type = data_type;
    return this;
  }

  public void unsetData_type() {
    this.data_type = null;
  }

  /** Returns true if field data_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_type() {
    return this.data_type != null;
  }

  public void setData_typeIsSet(boolean value) {
    if (!value) {
      this.data_type = null;
    }
  }

  public int getMax_error() {
    return this.max_error;
  }

  public ValueInTimeSeriesChunkMetaDataV30 setMax_error(int max_error) {
    this.max_error = max_error;
    setMax_errorIsSet(true);
    return this;
  }

  public void unsetMax_error() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ERROR_ISSET_ID);
  }

  /** Returns true if field max_error is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_error() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ERROR_ISSET_ID);
  }

  public void setMax_errorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ERROR_ISSET_ID, value);
  }

  public DigestV30 getDigest() {
    return this.digest;
  }

  public ValueInTimeSeriesChunkMetaDataV30 setDigest(DigestV30 digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public int getEnum_valuesSize() {
    return (this.enum_values == null) ? 0 : this.enum_values.size();
  }

  public java.util.Iterator<java.lang.String> getEnum_valuesIterator() {
    return (this.enum_values == null) ? null : this.enum_values.iterator();
  }

  public void addToEnum_values(java.lang.String elem) {
    if (this.enum_values == null) {
      this.enum_values = new java.util.ArrayList<java.lang.String>();
    }
    this.enum_values.add(elem);
  }

  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> getEnum_values() {
    return this.enum_values;
  }

  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public ValueInTimeSeriesChunkMetaDataV30 setEnum_values(java.util.List<java.lang.String> enum_values) {
    this.enum_values = enum_values;
    return this;
  }

  public void unsetEnum_values() {
    this.enum_values = null;
  }

  /** Returns true if field enum_values is set (has been assigned a value) and false otherwise */
  public boolean isSetEnum_values() {
    return this.enum_values != null;
  }

  public void setEnum_valuesIsSet(boolean value) {
    if (!value) {
      this.enum_values = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetData_type();
      } else {
        setData_type((DataTypeV30)value);
      }
      break;

    case MAX_ERROR:
      if (value == null) {
        unsetMax_error();
      } else {
        setMax_error((java.lang.Integer)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((DigestV30)value);
      }
      break;

    case ENUM_VALUES:
      if (value == null) {
        unsetEnum_values();
      } else {
        setEnum_values((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getData_type();

    case MAX_ERROR:
      return getMax_error();

    case DIGEST:
      return getDigest();

    case ENUM_VALUES:
      return getEnum_values();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetData_type();
    case MAX_ERROR:
      return isSetMax_error();
    case DIGEST:
      return isSetDigest();
    case ENUM_VALUES:
      return isSetEnum_values();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ValueInTimeSeriesChunkMetaDataV30)
      return this.equals((ValueInTimeSeriesChunkMetaDataV30)that);
    return false;
  }

  public boolean equals(ValueInTimeSeriesChunkMetaDataV30 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_data_type = true && this.isSetData_type();
    boolean that_present_data_type = true && that.isSetData_type();
    if (this_present_data_type || that_present_data_type) {
      if (!(this_present_data_type && that_present_data_type))
        return false;
      if (!this.data_type.equals(that.data_type))
        return false;
    }

    boolean this_present_max_error = true && this.isSetMax_error();
    boolean that_present_max_error = true && that.isSetMax_error();
    if (this_present_max_error || that_present_max_error) {
      if (!(this_present_max_error && that_present_max_error))
        return false;
      if (this.max_error != that.max_error)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_enum_values = true && this.isSetEnum_values();
    boolean that_present_enum_values = true && that.isSetEnum_values();
    if (this_present_enum_values || that_present_enum_values) {
      if (!(this_present_enum_values && that_present_enum_values))
        return false;
      if (!this.enum_values.equals(that.enum_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetData_type()) ? 131071 : 524287);
    if (isSetData_type())
      hashCode = hashCode * 8191 + data_type.getValue();

    hashCode = hashCode * 8191 + ((isSetMax_error()) ? 131071 : 524287);
    if (isSetMax_error())
      hashCode = hashCode * 8191 + max_error;

    hashCode = hashCode * 8191 + ((isSetDigest()) ? 131071 : 524287);
    if (isSetDigest())
      hashCode = hashCode * 8191 + digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnum_values()) ? 131071 : 524287);
    if (isSetEnum_values())
      hashCode = hashCode * 8191 + enum_values.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ValueInTimeSeriesChunkMetaDataV30 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetData_type()).compareTo(other.isSetData_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_type, other.data_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_error()).compareTo(other.isSetMax_error());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_error()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_error, other.max_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnum_values()).compareTo(other.isSetEnum_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnum_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enum_values, other.enum_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ValueInTimeSeriesChunkMetaDataV30(");
    boolean first = true;

    sb.append("data_type:");
    if (this.data_type == null) {
      sb.append("null");
    } else {
      sb.append(this.data_type);
    }
    first = false;
    if (isSetMax_error()) {
      if (!first) sb.append(", ");
      sb.append("max_error:");
      sb.append(this.max_error);
      first = false;
    }
    if (isSetDigest()) {
      if (!first) sb.append(", ");
      sb.append("digest:");
      if (this.digest == null) {
        sb.append("null");
      } else {
        sb.append(this.digest);
      }
      first = false;
    }
    if (isSetEnum_values()) {
      if (!first) sb.append(", ");
      sb.append("enum_values:");
      if (this.enum_values == null) {
        sb.append("null");
      } else {
        sb.append(this.enum_values);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (data_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (digest != null) {
      digest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ValueInTimeSeriesChunkMetaDataV30StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ValueInTimeSeriesChunkMetaDataV30StandardScheme getScheme() {
      return new ValueInTimeSeriesChunkMetaDataV30StandardScheme();
    }
  }

  private static class ValueInTimeSeriesChunkMetaDataV30StandardScheme extends org.apache.thrift.scheme.StandardScheme<ValueInTimeSeriesChunkMetaDataV30> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ValueInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
              struct.setData_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_error = iprot.readI32();
              struct.setMax_errorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.digest = new DigestV30();
              struct.digest.read(iprot);
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENUM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.enum_values = new java.util.ArrayList<java.lang.String>(_list16.size);
                java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.enum_values.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setEnum_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ValueInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data_type != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.data_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_error()) {
        oprot.writeFieldBegin(MAX_ERROR_FIELD_DESC);
        oprot.writeI32(struct.max_error);
        oprot.writeFieldEnd();
      }
      if (struct.digest != null) {
        if (struct.isSetDigest()) {
          oprot.writeFieldBegin(DIGEST_FIELD_DESC);
          struct.digest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.enum_values != null) {
        if (struct.isSetEnum_values()) {
          oprot.writeFieldBegin(ENUM_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enum_values.size()));
            for (java.lang.String _iter19 : struct.enum_values)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ValueInTimeSeriesChunkMetaDataV30TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ValueInTimeSeriesChunkMetaDataV30TupleScheme getScheme() {
      return new ValueInTimeSeriesChunkMetaDataV30TupleScheme();
    }
  }

  private static class ValueInTimeSeriesChunkMetaDataV30TupleScheme extends org.apache.thrift.scheme.TupleScheme<ValueInTimeSeriesChunkMetaDataV30> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ValueInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.data_type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMax_error()) {
        optionals.set(0);
      }
      if (struct.isSetDigest()) {
        optionals.set(1);
      }
      if (struct.isSetEnum_values()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMax_error()) {
        oprot.writeI32(struct.max_error);
      }
      if (struct.isSetDigest()) {
        struct.digest.write(oprot);
      }
      if (struct.isSetEnum_values()) {
        {
          oprot.writeI32(struct.enum_values.size());
          for (java.lang.String _iter20 : struct.enum_values)
          {
            oprot.writeString(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ValueInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.data_type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
      struct.setData_typeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.max_error = iprot.readI32();
        struct.setMax_errorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.digest = new DigestV30();
        struct.digest.read(iprot);
        struct.setDigestIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.enum_values = new java.util.ArrayList<java.lang.String>(_list21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.enum_values.add(_elem22);
          }
        }
        struct.setEnum_valuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

