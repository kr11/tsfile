/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.tsfile.formatV30;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-16")
public class TimeInTimeSeriesChunkMetaDataV30 implements org.apache.thrift.TBase<TimeInTimeSeriesChunkMetaDataV30, TimeInTimeSeriesChunkMetaDataV30._Fields>, java.io.Serializable, Cloneable, Comparable<TimeInTimeSeriesChunkMetaDataV30> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeInTimeSeriesChunkMetaDataV30");

  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FREQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("freq_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FREQUENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("frequencies", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STARTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_values", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimeInTimeSeriesChunkMetaDataV30StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimeInTimeSeriesChunkMetaDataV30TupleSchemeFactory();

  /**
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 data_type; // required
  /**
   * 
   * @see FreqTypeV30
   */
  public FreqTypeV30 freq_type; // optional
  public java.util.List<java.lang.Integer> frequencies; // optional
  public long startime; // required
  public long endtime; // required
  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> enum_values; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DataTypeV30
     */
    DATA_TYPE((short)1, "data_type"),
    /**
     * 
     * @see FreqTypeV30
     */
    FREQ_TYPE((short)2, "freq_type"),
    FREQUENCIES((short)3, "frequencies"),
    STARTIME((short)4, "startime"),
    ENDTIME((short)5, "endtime"),
    /**
     * If values of data consist of enum values, metadata will store all possible
     * values in time series
     */
    ENUM_VALUES((short)6, "enum_values");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_TYPE
          return DATA_TYPE;
        case 2: // FREQ_TYPE
          return FREQ_TYPE;
        case 3: // FREQUENCIES
          return FREQUENCIES;
        case 4: // STARTIME
          return STARTIME;
        case 5: // ENDTIME
          return ENDTIME;
        case 6: // ENUM_VALUES
          return ENUM_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FREQ_TYPE,_Fields.FREQUENCIES,_Fields.ENUM_VALUES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTypeV30.class)));
    tmpMap.put(_Fields.FREQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("freq_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FreqTypeV30.class)));
    tmpMap.put(_Fields.FREQUENCIES, new org.apache.thrift.meta_data.FieldMetaData("frequencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STARTIME, new org.apache.thrift.meta_data.FieldMetaData("startime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enum_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeInTimeSeriesChunkMetaDataV30.class, metaDataMap);
  }

  public TimeInTimeSeriesChunkMetaDataV30() {
  }

  public TimeInTimeSeriesChunkMetaDataV30(
    DataTypeV30 data_type,
    long startime,
    long endtime)
  {
    this();
    this.data_type = data_type;
    this.startime = startime;
    setStartimeIsSet(true);
    this.endtime = endtime;
    setEndtimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeInTimeSeriesChunkMetaDataV30(TimeInTimeSeriesChunkMetaDataV30 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetData_type()) {
      this.data_type = other.data_type;
    }
    if (other.isSetFreq_type()) {
      this.freq_type = other.freq_type;
    }
    if (other.isSetFrequencies()) {
      java.util.List<java.lang.Integer> __this__frequencies = new java.util.ArrayList<java.lang.Integer>(other.frequencies);
      this.frequencies = __this__frequencies;
    }
    this.startime = other.startime;
    this.endtime = other.endtime;
    if (other.isSetEnum_values()) {
      java.util.List<java.lang.String> __this__enum_values = new java.util.ArrayList<java.lang.String>(other.enum_values);
      this.enum_values = __this__enum_values;
    }
  }

  public TimeInTimeSeriesChunkMetaDataV30 deepCopy() {
    return new TimeInTimeSeriesChunkMetaDataV30(this);
  }

  @Override
  public void clear() {
    this.data_type = null;
    this.freq_type = null;
    this.frequencies = null;
    setStartimeIsSet(false);
    this.startime = 0;
    setEndtimeIsSet(false);
    this.endtime = 0;
    this.enum_values = null;
  }

  /**
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 getData_type() {
    return this.data_type;
  }

  /**
   * 
   * @see DataTypeV30
   */
  public TimeInTimeSeriesChunkMetaDataV30 setData_type(DataTypeV30 data_type) {
    this.data_type = data_type;
    return this;
  }

  public void unsetData_type() {
    this.data_type = null;
  }

  /** Returns true if field data_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_type() {
    return this.data_type != null;
  }

  public void setData_typeIsSet(boolean value) {
    if (!value) {
      this.data_type = null;
    }
  }

  /**
   * 
   * @see FreqTypeV30
   */
  public FreqTypeV30 getFreq_type() {
    return this.freq_type;
  }

  /**
   * 
   * @see FreqTypeV30
   */
  public TimeInTimeSeriesChunkMetaDataV30 setFreq_type(FreqTypeV30 freq_type) {
    this.freq_type = freq_type;
    return this;
  }

  public void unsetFreq_type() {
    this.freq_type = null;
  }

  /** Returns true if field freq_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFreq_type() {
    return this.freq_type != null;
  }

  public void setFreq_typeIsSet(boolean value) {
    if (!value) {
      this.freq_type = null;
    }
  }

  public int getFrequenciesSize() {
    return (this.frequencies == null) ? 0 : this.frequencies.size();
  }

  public java.util.Iterator<java.lang.Integer> getFrequenciesIterator() {
    return (this.frequencies == null) ? null : this.frequencies.iterator();
  }

  public void addToFrequencies(int elem) {
    if (this.frequencies == null) {
      this.frequencies = new java.util.ArrayList<java.lang.Integer>();
    }
    this.frequencies.add(elem);
  }

  public java.util.List<java.lang.Integer> getFrequencies() {
    return this.frequencies;
  }

  public TimeInTimeSeriesChunkMetaDataV30 setFrequencies(java.util.List<java.lang.Integer> frequencies) {
    this.frequencies = frequencies;
    return this;
  }

  public void unsetFrequencies() {
    this.frequencies = null;
  }

  /** Returns true if field frequencies is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequencies() {
    return this.frequencies != null;
  }

  public void setFrequenciesIsSet(boolean value) {
    if (!value) {
      this.frequencies = null;
    }
  }

  public long getStartime() {
    return this.startime;
  }

  public TimeInTimeSeriesChunkMetaDataV30 setStartime(long startime) {
    this.startime = startime;
    setStartimeIsSet(true);
    return this;
  }

  public void unsetStartime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTIME_ISSET_ID);
  }

  /** Returns true if field startime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTIME_ISSET_ID);
  }

  public void setStartimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTIME_ISSET_ID, value);
  }

  public long getEndtime() {
    return this.endtime;
  }

  public TimeInTimeSeriesChunkMetaDataV30 setEndtime(long endtime) {
    this.endtime = endtime;
    setEndtimeIsSet(true);
    return this;
  }

  public void unsetEndtime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndtimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getEnum_valuesSize() {
    return (this.enum_values == null) ? 0 : this.enum_values.size();
  }

  public java.util.Iterator<java.lang.String> getEnum_valuesIterator() {
    return (this.enum_values == null) ? null : this.enum_values.iterator();
  }

  public void addToEnum_values(java.lang.String elem) {
    if (this.enum_values == null) {
      this.enum_values = new java.util.ArrayList<java.lang.String>();
    }
    this.enum_values.add(elem);
  }

  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> getEnum_values() {
    return this.enum_values;
  }

  /**
   * If values of data consist of enum values, metadata will store all possible
   * values in time series
   */
  public TimeInTimeSeriesChunkMetaDataV30 setEnum_values(java.util.List<java.lang.String> enum_values) {
    this.enum_values = enum_values;
    return this;
  }

  public void unsetEnum_values() {
    this.enum_values = null;
  }

  /** Returns true if field enum_values is set (has been assigned a value) and false otherwise */
  public boolean isSetEnum_values() {
    return this.enum_values != null;
  }

  public void setEnum_valuesIsSet(boolean value) {
    if (!value) {
      this.enum_values = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DATA_TYPE:
      if (value == null) {
        unsetData_type();
      } else {
        setData_type((DataTypeV30)value);
      }
      break;

    case FREQ_TYPE:
      if (value == null) {
        unsetFreq_type();
      } else {
        setFreq_type((FreqTypeV30)value);
      }
      break;

    case FREQUENCIES:
      if (value == null) {
        unsetFrequencies();
      } else {
        setFrequencies((java.util.List<java.lang.Integer>)value);
      }
      break;

    case STARTIME:
      if (value == null) {
        unsetStartime();
      } else {
        setStartime((java.lang.Long)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((java.lang.Long)value);
      }
      break;

    case ENUM_VALUES:
      if (value == null) {
        unsetEnum_values();
      } else {
        setEnum_values((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_TYPE:
      return getData_type();

    case FREQ_TYPE:
      return getFreq_type();

    case FREQUENCIES:
      return getFrequencies();

    case STARTIME:
      return getStartime();

    case ENDTIME:
      return getEndtime();

    case ENUM_VALUES:
      return getEnum_values();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATA_TYPE:
      return isSetData_type();
    case FREQ_TYPE:
      return isSetFreq_type();
    case FREQUENCIES:
      return isSetFrequencies();
    case STARTIME:
      return isSetStartime();
    case ENDTIME:
      return isSetEndtime();
    case ENUM_VALUES:
      return isSetEnum_values();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeInTimeSeriesChunkMetaDataV30)
      return this.equals((TimeInTimeSeriesChunkMetaDataV30)that);
    return false;
  }

  public boolean equals(TimeInTimeSeriesChunkMetaDataV30 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_data_type = true && this.isSetData_type();
    boolean that_present_data_type = true && that.isSetData_type();
    if (this_present_data_type || that_present_data_type) {
      if (!(this_present_data_type && that_present_data_type))
        return false;
      if (!this.data_type.equals(that.data_type))
        return false;
    }

    boolean this_present_freq_type = true && this.isSetFreq_type();
    boolean that_present_freq_type = true && that.isSetFreq_type();
    if (this_present_freq_type || that_present_freq_type) {
      if (!(this_present_freq_type && that_present_freq_type))
        return false;
      if (!this.freq_type.equals(that.freq_type))
        return false;
    }

    boolean this_present_frequencies = true && this.isSetFrequencies();
    boolean that_present_frequencies = true && that.isSetFrequencies();
    if (this_present_frequencies || that_present_frequencies) {
      if (!(this_present_frequencies && that_present_frequencies))
        return false;
      if (!this.frequencies.equals(that.frequencies))
        return false;
    }

    boolean this_present_startime = true;
    boolean that_present_startime = true;
    if (this_present_startime || that_present_startime) {
      if (!(this_present_startime && that_present_startime))
        return false;
      if (this.startime != that.startime)
        return false;
    }

    boolean this_present_endtime = true;
    boolean that_present_endtime = true;
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (this.endtime != that.endtime)
        return false;
    }

    boolean this_present_enum_values = true && this.isSetEnum_values();
    boolean that_present_enum_values = true && that.isSetEnum_values();
    if (this_present_enum_values || that_present_enum_values) {
      if (!(this_present_enum_values && that_present_enum_values))
        return false;
      if (!this.enum_values.equals(that.enum_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
//    int hashCode = 1;
//
//    hashCode = hashCode * 8191 + ((isSetData_type()) ? 131071 : 524287);
//    if (isSetData_type())
//      hashCode = hashCode * 8191 + data_type.getValue();
//
//    hashCode = hashCode * 8191 + ((isSetFreq_type()) ? 131071 : 524287);
//    if (isSetFreq_type())
//      hashCode = hashCode * 8191 + freq_type.getValue();
//
//    hashCode = hashCode * 8191 + ((isSetFrequencies()) ? 131071 : 524287);
//    if (isSetFrequencies())
//      hashCode = hashCode * 8191 + frequencies.hashCode();
//
//    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startime);
//
//    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endtime);
//
//    hashCode = hashCode * 8191 + ((isSetEnum_values()) ? 131071 : 524287);
//    if (isSetEnum_values())
//      hashCode = hashCode * 8191 + enum_values.hashCode();

    return 0;
  }

  @Override
  public int compareTo(TimeInTimeSeriesChunkMetaDataV30 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetData_type()).compareTo(other.isSetData_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_type, other.data_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreq_type()).compareTo(other.isSetFreq_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreq_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freq_type, other.freq_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFrequencies()).compareTo(other.isSetFrequencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequencies, other.frequencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartime()).compareTo(other.isSetStartime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startime, other.startime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnum_values()).compareTo(other.isSetEnum_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnum_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enum_values, other.enum_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimeInTimeSeriesChunkMetaDataV30(");
    boolean first = true;

    sb.append("data_type:");
    if (this.data_type == null) {
      sb.append("null");
    } else {
      sb.append(this.data_type);
    }
    first = false;
    if (isSetFreq_type()) {
      if (!first) sb.append(", ");
      sb.append("freq_type:");
      if (this.freq_type == null) {
        sb.append("null");
      } else {
        sb.append(this.freq_type);
      }
      first = false;
    }
    if (isSetFrequencies()) {
      if (!first) sb.append(", ");
      sb.append("frequencies:");
      if (this.frequencies == null) {
        sb.append("null");
      } else {
        sb.append(this.frequencies);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("startime:");
    sb.append(this.startime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    sb.append(this.endtime);
    first = false;
    if (isSetEnum_values()) {
      if (!first) sb.append(", ");
      sb.append("enum_values:");
      if (this.enum_values == null) {
        sb.append("null");
      } else {
        sb.append(this.enum_values);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (data_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endtime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeInTimeSeriesChunkMetaDataV30StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeInTimeSeriesChunkMetaDataV30StandardScheme getScheme() {
      return new TimeInTimeSeriesChunkMetaDataV30StandardScheme();
    }
  }

  private static class TimeInTimeSeriesChunkMetaDataV30StandardScheme extends org.apache.thrift.scheme.StandardScheme<TimeInTimeSeriesChunkMetaDataV30> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
              struct.setData_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FREQ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freq_type = cn.edu.tsinghua.tsfile.formatV30.FreqTypeV30.findByValue(iprot.readI32());
              struct.setFreq_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREQUENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.frequencies = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.frequencies.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFrequenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startime = iprot.readI64();
              struct.setStartimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endtime = iprot.readI64();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENUM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.enum_values = new java.util.ArrayList<java.lang.String>(_list3.size);
                java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.enum_values.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setEnum_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndtime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endtime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data_type != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.data_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.freq_type != null) {
        if (struct.isSetFreq_type()) {
          oprot.writeFieldBegin(FREQ_TYPE_FIELD_DESC);
          oprot.writeI32(struct.freq_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.frequencies != null) {
        if (struct.isSetFrequencies()) {
          oprot.writeFieldBegin(FREQUENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.frequencies.size()));
            for (int _iter6 : struct.frequencies)
            {
              oprot.writeI32(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(STARTIME_FIELD_DESC);
      oprot.writeI64(struct.startime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
      oprot.writeI64(struct.endtime);
      oprot.writeFieldEnd();
      if (struct.enum_values != null) {
        if (struct.isSetEnum_values()) {
          oprot.writeFieldBegin(ENUM_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enum_values.size()));
            for (java.lang.String _iter7 : struct.enum_values)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeInTimeSeriesChunkMetaDataV30TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeInTimeSeriesChunkMetaDataV30TupleScheme getScheme() {
      return new TimeInTimeSeriesChunkMetaDataV30TupleScheme();
    }
  }

  private static class TimeInTimeSeriesChunkMetaDataV30TupleScheme extends org.apache.thrift.scheme.TupleScheme<TimeInTimeSeriesChunkMetaDataV30> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.data_type.getValue());
      oprot.writeI64(struct.startime);
      oprot.writeI64(struct.endtime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFreq_type()) {
        optionals.set(0);
      }
      if (struct.isSetFrequencies()) {
        optionals.set(1);
      }
      if (struct.isSetEnum_values()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFreq_type()) {
        oprot.writeI32(struct.freq_type.getValue());
      }
      if (struct.isSetFrequencies()) {
        {
          oprot.writeI32(struct.frequencies.size());
          for (int _iter8 : struct.frequencies)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetEnum_values()) {
        {
          oprot.writeI32(struct.enum_values.size());
          for (java.lang.String _iter9 : struct.enum_values)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeInTimeSeriesChunkMetaDataV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.data_type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
      struct.setData_typeIsSet(true);
      struct.startime = iprot.readI64();
      struct.setStartimeIsSet(true);
      struct.endtime = iprot.readI64();
      struct.setEndtimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.freq_type = cn.edu.tsinghua.tsfile.formatV30.FreqTypeV30.findByValue(iprot.readI32());
        struct.setFreq_typeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.frequencies = new java.util.ArrayList<java.lang.Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.frequencies.add(_elem11);
          }
        }
        struct.setFrequenciesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.enum_values = new java.util.ArrayList<java.lang.String>(_list13.size);
          java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.enum_values.add(_elem14);
          }
        }
        struct.setEnum_valuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

