/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.tsfile.formatV30;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Description for a delta object
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-16")
public class DeltaObjectV30 implements org.apache.thrift.TBase<DeltaObjectV30, DeltaObjectV30._Fields>, java.io.Serializable, Cloneable, Comparable<DeltaObjectV30> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeltaObjectV30");

  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField METADATA_BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata_block_size", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeltaObjectV30StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeltaObjectV30TupleSchemeFactory();

  /**
   * start position of RowGroupMetadataBlock in file *
   */
  public long offset; // required
  /**
   * size of RowGroupMetadataBlock in byte *
   */
  public int metadata_block_size; // required
  /**
   * start time *
   */
  public long start_time; // required
  /**
   * end time *
   */
  public long end_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * start position of RowGroupMetadataBlock in file *
     */
    OFFSET((short)1, "offset"),
    /**
     * size of RowGroupMetadataBlock in byte *
     */
    METADATA_BLOCK_SIZE((short)2, "metadata_block_size"),
    /**
     * start time *
     */
    START_TIME((short)3, "start_time"),
    /**
     * end time *
     */
    END_TIME((short)4, "end_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OFFSET
          return OFFSET;
        case 2: // METADATA_BLOCK_SIZE
          return METADATA_BLOCK_SIZE;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __METADATA_BLOCK_SIZE_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private static final int __END_TIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METADATA_BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("metadata_block_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("end_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeltaObjectV30.class, metaDataMap);
  }

  public DeltaObjectV30() {
  }

  public DeltaObjectV30(
    long offset,
    int metadata_block_size,
    long start_time,
    long end_time)
  {
    this();
    this.offset = offset;
    setOffsetIsSet(true);
    this.metadata_block_size = metadata_block_size;
    setMetadata_block_sizeIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.end_time = end_time;
    setEnd_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeltaObjectV30(DeltaObjectV30 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.offset = other.offset;
    this.metadata_block_size = other.metadata_block_size;
    this.start_time = other.start_time;
    this.end_time = other.end_time;
  }

  public DeltaObjectV30 deepCopy() {
    return new DeltaObjectV30(this);
  }

  @Override
  public void clear() {
    setOffsetIsSet(false);
    this.offset = 0;
    setMetadata_block_sizeIsSet(false);
    this.metadata_block_size = 0;
    setStart_timeIsSet(false);
    this.start_time = 0;
    setEnd_timeIsSet(false);
    this.end_time = 0;
  }

  /**
   * start position of RowGroupMetadataBlock in file *
   */
  public long getOffset() {
    return this.offset;
  }

  /**
   * start position of RowGroupMetadataBlock in file *
   */
  public DeltaObjectV30 setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  /**
   * size of RowGroupMetadataBlock in byte *
   */
  public int getMetadata_block_size() {
    return this.metadata_block_size;
  }

  /**
   * size of RowGroupMetadataBlock in byte *
   */
  public DeltaObjectV30 setMetadata_block_size(int metadata_block_size) {
    this.metadata_block_size = metadata_block_size;
    setMetadata_block_sizeIsSet(true);
    return this;
  }

  public void unsetMetadata_block_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __METADATA_BLOCK_SIZE_ISSET_ID);
  }

  /** Returns true if field metadata_block_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata_block_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __METADATA_BLOCK_SIZE_ISSET_ID);
  }

  public void setMetadata_block_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __METADATA_BLOCK_SIZE_ISSET_ID, value);
  }

  /**
   * start time *
   */
  public long getStart_time() {
    return this.start_time;
  }

  /**
   * start time *
   */
  public DeltaObjectV30 setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_TIME_ISSET_ID, value);
  }

  /**
   * end time *
   */
  public long getEnd_time() {
    return this.end_time;
  }

  /**
   * end time *
   */
  public DeltaObjectV30 setEnd_time(long end_time) {
    this.end_time = end_time;
    setEnd_timeIsSet(true);
    return this;
  }

  public void unsetEnd_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_TIME_ISSET_ID);
  }

  /** Returns true if field end_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_TIME_ISSET_ID);
  }

  public void setEnd_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case METADATA_BLOCK_SIZE:
      if (value == null) {
        unsetMetadata_block_size();
      } else {
        setMetadata_block_size((java.lang.Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEnd_time();
      } else {
        setEnd_time((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OFFSET:
      return getOffset();

    case METADATA_BLOCK_SIZE:
      return getMetadata_block_size();

    case START_TIME:
      return getStart_time();

    case END_TIME:
      return getEnd_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OFFSET:
      return isSetOffset();
    case METADATA_BLOCK_SIZE:
      return isSetMetadata_block_size();
    case START_TIME:
      return isSetStart_time();
    case END_TIME:
      return isSetEnd_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DeltaObjectV30)
      return this.equals((DeltaObjectV30)that);
    return false;
  }

  public boolean equals(DeltaObjectV30 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_metadata_block_size = true;
    boolean that_present_metadata_block_size = true;
    if (this_present_metadata_block_size || that_present_metadata_block_size) {
      if (!(this_present_metadata_block_size && that_present_metadata_block_size))
        return false;
      if (this.metadata_block_size != that.metadata_block_size)
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_end_time = true;
    boolean that_present_end_time = true;
    if (this_present_end_time || that_present_end_time) {
      if (!(this_present_end_time && that_present_end_time))
        return false;
      if (this.end_time != that.end_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
//    int hashCode = 1;
//
//    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);
//
//    hashCode = hashCode * 8191 + metadata_block_size;
//
//    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_time);
//
//    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(end_time);
//
//    return hashCode;
    return 0;
  }

  @Override
  public int compareTo(DeltaObjectV30 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetadata_block_size()).compareTo(other.isSetMetadata_block_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata_block_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata_block_size, other.metadata_block_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnd_time()).compareTo(other.isSetEnd_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time, other.end_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DeltaObjectV30(");
    boolean first = true;

    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata_block_size:");
    sb.append(this.metadata_block_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_time:");
    sb.append(this.end_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'offset' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'metadata_block_size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'start_time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'end_time' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeltaObjectV30StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeltaObjectV30StandardScheme getScheme() {
      return new DeltaObjectV30StandardScheme();
    }
  }

  private static class DeltaObjectV30StandardScheme extends org.apache.thrift.scheme.StandardScheme<DeltaObjectV30> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeltaObjectV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METADATA_BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metadata_block_size = iprot.readI32();
              struct.setMetadata_block_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time = iprot.readI64();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.end_time = iprot.readI64();
              struct.setEnd_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOffset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'offset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMetadata_block_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata_block_size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEnd_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'end_time' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeltaObjectV30 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METADATA_BLOCK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.metadata_block_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.end_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeltaObjectV30TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeltaObjectV30TupleScheme getScheme() {
      return new DeltaObjectV30TupleScheme();
    }
  }

  private static class DeltaObjectV30TupleScheme extends org.apache.thrift.scheme.TupleScheme<DeltaObjectV30> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeltaObjectV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.offset);
      oprot.writeI32(struct.metadata_block_size);
      oprot.writeI64(struct.start_time);
      oprot.writeI64(struct.end_time);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeltaObjectV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.offset = iprot.readI64();
      struct.setOffsetIsSet(true);
      struct.metadata_block_size = iprot.readI32();
      struct.setMetadata_block_sizeIsSet(true);
      struct.start_time = iprot.readI64();
      struct.setStart_timeIsSet(true);
      struct.end_time = iprot.readI64();
      struct.setEnd_timeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

