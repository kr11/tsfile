/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.tsfile.formatV30;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Schema definition of a time-series. Logically, a time-series could be
 * regarded as a list of timestamp-value pairs.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-16")
public class TimeSeriesV30 implements org.apache.thrift.TBase<TimeSeriesV30, TimeSeriesV30._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSeriesV30> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSeriesV30");

  private static final org.apache.thrift.protocol.TField MEASUREMENT_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("measurement_uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("type_length", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FREQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("freq_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FREQUENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("frequencies", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CONVERTED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("converted_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("field_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ENUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("enum_values", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField DELTA_OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("delta_object_type", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimeSeriesV30StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimeSeriesV30TupleSchemeFactory();

  public java.lang.String measurement_uid; // required
  /**
   * Data type for this time series.
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 type; // required
  /**
   * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
   * Otherwise, if specified, this is the maximum bit length to store any of the values.
   * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
   * in the schema, and therefore fixed for the entire file.
   */
  public int type_length; // optional
  /**
   * Frequency type of the measurement that generates this time series data.
   * This field is reserved for optimization storage and access.
   * Currently, it is not used.
   * 
   * @see FreqTypeV30
   */
  public FreqTypeV30 freq_type; // optional
  /**
   * Frequency values of the measurement that generates this time series data.
   * Note that a measurement may have multiple frequency values.
   */
  public java.util.List<java.lang.Integer> frequencies; // optional
  /**
   * When the schema is the result of a conversion from another model,
   * converted_type is used to record the original type to help with cross conversion.
   * 
   * @see ConvertedTypeV30
   */
  public ConvertedTypeV30 converted_type; // optional
  /**
   * Used when this timeseries contains decimal data.
   * See the DECIMAL converted type for more details.
   */
  public int scale; // optional
  public int precision; // optional
  /**
   * When the original schema supports field ids, this will save the
   * original field id in the TSFile schema
   */
  public int field_id; // optional
  /**
   * If values for data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> enum_values; // optional
  public java.lang.String delta_object_type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEASUREMENT_UID((short)1, "measurement_uid"),
    /**
     * Data type for this time series.
     * 
     * @see DataTypeV30
     */
    TYPE((short)2, "type"),
    /**
     * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
     * Otherwise, if specified, this is the maximum bit length to store any of the values.
     * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
     * in the schema, and therefore fixed for the entire file.
     */
    TYPE_LENGTH((short)3, "type_length"),
    /**
     * Frequency type of the measurement that generates this time series data.
     * This field is reserved for optimization storage and access.
     * Currently, it is not used.
     * 
     * @see FreqTypeV30
     */
    FREQ_TYPE((short)4, "freq_type"),
    /**
     * Frequency values of the measurement that generates this time series data.
     * Note that a measurement may have multiple frequency values.
     */
    FREQUENCIES((short)5, "frequencies"),
    /**
     * When the schema is the result of a conversion from another model,
     * converted_type is used to record the original type to help with cross conversion.
     * 
     * @see ConvertedTypeV30
     */
    CONVERTED_TYPE((short)6, "converted_type"),
    /**
     * Used when this timeseries contains decimal data.
     * See the DECIMAL converted type for more details.
     */
    SCALE((short)7, "scale"),
    PRECISION((short)8, "precision"),
    /**
     * When the original schema supports field ids, this will save the
     * original field id in the TSFile schema
     */
    FIELD_ID((short)9, "field_id"),
    /**
     * If values for data consist of enum values, metadata will store all possible
     * values in time series
     */
    ENUM_VALUES((short)10, "enum_values"),
    DELTA_OBJECT_TYPE((short)11, "delta_object_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEASUREMENT_UID
          return MEASUREMENT_UID;
        case 2: // TYPE
          return TYPE;
        case 3: // TYPE_LENGTH
          return TYPE_LENGTH;
        case 4: // FREQ_TYPE
          return FREQ_TYPE;
        case 5: // FREQUENCIES
          return FREQUENCIES;
        case 6: // CONVERTED_TYPE
          return CONVERTED_TYPE;
        case 7: // SCALE
          return SCALE;
        case 8: // PRECISION
          return PRECISION;
        case 9: // FIELD_ID
          return FIELD_ID;
        case 10: // ENUM_VALUES
          return ENUM_VALUES;
        case 11: // DELTA_OBJECT_TYPE
          return DELTA_OBJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_LENGTH_ISSET_ID = 0;
  private static final int __SCALE_ISSET_ID = 1;
  private static final int __PRECISION_ISSET_ID = 2;
  private static final int __FIELD_ID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE_LENGTH,_Fields.FREQ_TYPE,_Fields.FREQUENCIES,_Fields.CONVERTED_TYPE,_Fields.SCALE,_Fields.PRECISION,_Fields.FIELD_ID,_Fields.ENUM_VALUES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEASUREMENT_UID, new org.apache.thrift.meta_data.FieldMetaData("measurement_uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTypeV30.class)));
    tmpMap.put(_Fields.TYPE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("type_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("freq_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FreqTypeV30.class)));
    tmpMap.put(_Fields.FREQUENCIES, new org.apache.thrift.meta_data.FieldMetaData("frequencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CONVERTED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("converted_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConvertedTypeV30.class)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("field_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("enum_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELTA_OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("delta_object_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSeriesV30.class, metaDataMap);
  }

  public TimeSeriesV30() {
  }

  public TimeSeriesV30(
    java.lang.String measurement_uid,
    DataTypeV30 type,
    java.lang.String delta_object_type)
  {
    this();
    this.measurement_uid = measurement_uid;
    this.type = type;
    this.delta_object_type = delta_object_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeSeriesV30(TimeSeriesV30 other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMeasurement_uid()) {
      this.measurement_uid = other.measurement_uid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.type_length = other.type_length;
    if (other.isSetFreq_type()) {
      this.freq_type = other.freq_type;
    }
    if (other.isSetFrequencies()) {
      java.util.List<java.lang.Integer> __this__frequencies = new java.util.ArrayList<java.lang.Integer>(other.frequencies);
      this.frequencies = __this__frequencies;
    }
    if (other.isSetConverted_type()) {
      this.converted_type = other.converted_type;
    }
    this.scale = other.scale;
    this.precision = other.precision;
    this.field_id = other.field_id;
    if (other.isSetEnum_values()) {
      java.util.List<java.lang.String> __this__enum_values = new java.util.ArrayList<java.lang.String>(other.enum_values);
      this.enum_values = __this__enum_values;
    }
    if (other.isSetDelta_object_type()) {
      this.delta_object_type = other.delta_object_type;
    }
  }

  public TimeSeriesV30 deepCopy() {
    return new TimeSeriesV30(this);
  }

  @Override
  public void clear() {
    this.measurement_uid = null;
    this.type = null;
    setType_lengthIsSet(false);
    this.type_length = 0;
    this.freq_type = null;
    this.frequencies = null;
    this.converted_type = null;
    setScaleIsSet(false);
    this.scale = 0;
    setPrecisionIsSet(false);
    this.precision = 0;
    setField_idIsSet(false);
    this.field_id = 0;
    this.enum_values = null;
    this.delta_object_type = null;
  }

  public java.lang.String getMeasurement_uid() {
    return this.measurement_uid;
  }

  public TimeSeriesV30 setMeasurement_uid(java.lang.String measurement_uid) {
    this.measurement_uid = measurement_uid;
    return this;
  }

  public void unsetMeasurement_uid() {
    this.measurement_uid = null;
  }

  /** Returns true if field measurement_uid is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurement_uid() {
    return this.measurement_uid != null;
  }

  public void setMeasurement_uidIsSet(boolean value) {
    if (!value) {
      this.measurement_uid = null;
    }
  }

  /**
   * Data type for this time series.
   * 
   * @see DataTypeV30
   */
  public DataTypeV30 getType() {
    return this.type;
  }

  /**
   * Data type for this time series.
   * 
   * @see DataTypeV30
   */
  public TimeSeriesV30 setType(DataTypeV30 type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
   * Otherwise, if specified, this is the maximum bit length to store any of the values.
   * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
   * in the schema, and therefore fixed for the entire file.
   */
  public int getType_length() {
    return this.type_length;
  }

  /**
   * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
   * Otherwise, if specified, this is the maximum bit length to store any of the values.
   * (e.g. a low cardinality INT timeseries could have this set to 32).  Note that this is
   * in the schema, and therefore fixed for the entire file.
   */
  public TimeSeriesV30 setType_length(int type_length) {
    this.type_length = type_length;
    setType_lengthIsSet(true);
    return this;
  }

  public void unsetType_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID);
  }

  /** Returns true if field type_length is set (has been assigned a value) and false otherwise */
  public boolean isSetType_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID);
  }

  public void setType_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_LENGTH_ISSET_ID, value);
  }

  /**
   * Frequency type of the measurement that generates this time series data.
   * This field is reserved for optimization storage and access.
   * Currently, it is not used.
   * 
   * @see FreqTypeV30
   */
  public FreqTypeV30 getFreq_type() {
    return this.freq_type;
  }

  /**
   * Frequency type of the measurement that generates this time series data.
   * This field is reserved for optimization storage and access.
   * Currently, it is not used.
   * 
   * @see FreqTypeV30
   */
  public TimeSeriesV30 setFreq_type(FreqTypeV30 freq_type) {
    this.freq_type = freq_type;
    return this;
  }

  public void unsetFreq_type() {
    this.freq_type = null;
  }

  /** Returns true if field freq_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFreq_type() {
    return this.freq_type != null;
  }

  public void setFreq_typeIsSet(boolean value) {
    if (!value) {
      this.freq_type = null;
    }
  }

  public int getFrequenciesSize() {
    return (this.frequencies == null) ? 0 : this.frequencies.size();
  }

  public java.util.Iterator<java.lang.Integer> getFrequenciesIterator() {
    return (this.frequencies == null) ? null : this.frequencies.iterator();
  }

  public void addToFrequencies(int elem) {
    if (this.frequencies == null) {
      this.frequencies = new java.util.ArrayList<java.lang.Integer>();
    }
    this.frequencies.add(elem);
  }

  /**
   * Frequency values of the measurement that generates this time series data.
   * Note that a measurement may have multiple frequency values.
   */
  public java.util.List<java.lang.Integer> getFrequencies() {
    return this.frequencies;
  }

  /**
   * Frequency values of the measurement that generates this time series data.
   * Note that a measurement may have multiple frequency values.
   */
  public TimeSeriesV30 setFrequencies(java.util.List<java.lang.Integer> frequencies) {
    this.frequencies = frequencies;
    return this;
  }

  public void unsetFrequencies() {
    this.frequencies = null;
  }

  /** Returns true if field frequencies is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequencies() {
    return this.frequencies != null;
  }

  public void setFrequenciesIsSet(boolean value) {
    if (!value) {
      this.frequencies = null;
    }
  }

  /**
   * When the schema is the result of a conversion from another model,
   * converted_type is used to record the original type to help with cross conversion.
   * 
   * @see ConvertedTypeV30
   */
  public ConvertedTypeV30 getConverted_type() {
    return this.converted_type;
  }

  /**
   * When the schema is the result of a conversion from another model,
   * converted_type is used to record the original type to help with cross conversion.
   * 
   * @see ConvertedTypeV30
   */
  public TimeSeriesV30 setConverted_type(ConvertedTypeV30 converted_type) {
    this.converted_type = converted_type;
    return this;
  }

  public void unsetConverted_type() {
    this.converted_type = null;
  }

  /** Returns true if field converted_type is set (has been assigned a value) and false otherwise */
  public boolean isSetConverted_type() {
    return this.converted_type != null;
  }

  public void setConverted_typeIsSet(boolean value) {
    if (!value) {
      this.converted_type = null;
    }
  }

  /**
   * Used when this timeseries contains decimal data.
   * See the DECIMAL converted type for more details.
   */
  public int getScale() {
    return this.scale;
  }

  /**
   * Used when this timeseries contains decimal data.
   * See the DECIMAL converted type for more details.
   */
  public TimeSeriesV30 setScale(int scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public int getPrecision() {
    return this.precision;
  }

  public TimeSeriesV30 setPrecision(int precision) {
    this.precision = precision;
    setPrecisionIsSet(true);
    return this;
  }

  public void unsetPrecision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRECISION_ISSET_ID);
  }

  public void setPrecisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRECISION_ISSET_ID, value);
  }

  /**
   * When the original schema supports field ids, this will save the
   * original field id in the TSFile schema
   */
  public int getField_id() {
    return this.field_id;
  }

  /**
   * When the original schema supports field ids, this will save the
   * original field id in the TSFile schema
   */
  public TimeSeriesV30 setField_id(int field_id) {
    this.field_id = field_id;
    setField_idIsSet(true);
    return this;
  }

  public void unsetField_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  /** Returns true if field field_id is set (has been assigned a value) and false otherwise */
  public boolean isSetField_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIELD_ID_ISSET_ID);
  }

  public void setField_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIELD_ID_ISSET_ID, value);
  }

  public int getEnum_valuesSize() {
    return (this.enum_values == null) ? 0 : this.enum_values.size();
  }

  public java.util.Iterator<java.lang.String> getEnum_valuesIterator() {
    return (this.enum_values == null) ? null : this.enum_values.iterator();
  }

  public void addToEnum_values(java.lang.String elem) {
    if (this.enum_values == null) {
      this.enum_values = new java.util.ArrayList<java.lang.String>();
    }
    this.enum_values.add(elem);
  }

  /**
   * If values for data consist of enum values, metadata will store all possible
   * values in time series
   */
  public java.util.List<java.lang.String> getEnum_values() {
    return this.enum_values;
  }

  /**
   * If values for data consist of enum values, metadata will store all possible
   * values in time series
   */
  public TimeSeriesV30 setEnum_values(java.util.List<java.lang.String> enum_values) {
    this.enum_values = enum_values;
    return this;
  }

  public void unsetEnum_values() {
    this.enum_values = null;
  }

  /** Returns true if field enum_values is set (has been assigned a value) and false otherwise */
  public boolean isSetEnum_values() {
    return this.enum_values != null;
  }

  public void setEnum_valuesIsSet(boolean value) {
    if (!value) {
      this.enum_values = null;
    }
  }

  public java.lang.String getDelta_object_type() {
    return this.delta_object_type;
  }

  public TimeSeriesV30 setDelta_object_type(java.lang.String delta_object_type) {
    this.delta_object_type = delta_object_type;
    return this;
  }

  public void unsetDelta_object_type() {
    this.delta_object_type = null;
  }

  /** Returns true if field delta_object_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDelta_object_type() {
    return this.delta_object_type != null;
  }

  public void setDelta_object_typeIsSet(boolean value) {
    if (!value) {
      this.delta_object_type = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MEASUREMENT_UID:
      if (value == null) {
        unsetMeasurement_uid();
      } else {
        setMeasurement_uid((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DataTypeV30)value);
      }
      break;

    case TYPE_LENGTH:
      if (value == null) {
        unsetType_length();
      } else {
        setType_length((java.lang.Integer)value);
      }
      break;

    case FREQ_TYPE:
      if (value == null) {
        unsetFreq_type();
      } else {
        setFreq_type((FreqTypeV30)value);
      }
      break;

    case FREQUENCIES:
      if (value == null) {
        unsetFrequencies();
      } else {
        setFrequencies((java.util.List<java.lang.Integer>)value);
      }
      break;

    case CONVERTED_TYPE:
      if (value == null) {
        unsetConverted_type();
      } else {
        setConverted_type((ConvertedTypeV30)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((java.lang.Integer)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((java.lang.Integer)value);
      }
      break;

    case FIELD_ID:
      if (value == null) {
        unsetField_id();
      } else {
        setField_id((java.lang.Integer)value);
      }
      break;

    case ENUM_VALUES:
      if (value == null) {
        unsetEnum_values();
      } else {
        setEnum_values((java.util.List<java.lang.String>)value);
      }
      break;

    case DELTA_OBJECT_TYPE:
      if (value == null) {
        unsetDelta_object_type();
      } else {
        setDelta_object_type((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MEASUREMENT_UID:
      return getMeasurement_uid();

    case TYPE:
      return getType();

    case TYPE_LENGTH:
      return getType_length();

    case FREQ_TYPE:
      return getFreq_type();

    case FREQUENCIES:
      return getFrequencies();

    case CONVERTED_TYPE:
      return getConverted_type();

    case SCALE:
      return getScale();

    case PRECISION:
      return getPrecision();

    case FIELD_ID:
      return getField_id();

    case ENUM_VALUES:
      return getEnum_values();

    case DELTA_OBJECT_TYPE:
      return getDelta_object_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MEASUREMENT_UID:
      return isSetMeasurement_uid();
    case TYPE:
      return isSetType();
    case TYPE_LENGTH:
      return isSetType_length();
    case FREQ_TYPE:
      return isSetFreq_type();
    case FREQUENCIES:
      return isSetFrequencies();
    case CONVERTED_TYPE:
      return isSetConverted_type();
    case SCALE:
      return isSetScale();
    case PRECISION:
      return isSetPrecision();
    case FIELD_ID:
      return isSetField_id();
    case ENUM_VALUES:
      return isSetEnum_values();
    case DELTA_OBJECT_TYPE:
      return isSetDelta_object_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeSeriesV30)
      return this.equals((TimeSeriesV30)that);
    return false;
  }

  public boolean equals(TimeSeriesV30 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_measurement_uid = true && this.isSetMeasurement_uid();
    boolean that_present_measurement_uid = true && that.isSetMeasurement_uid();
    if (this_present_measurement_uid || that_present_measurement_uid) {
      if (!(this_present_measurement_uid && that_present_measurement_uid))
        return false;
      if (!this.measurement_uid.equals(that.measurement_uid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_type_length = true && this.isSetType_length();
    boolean that_present_type_length = true && that.isSetType_length();
    if (this_present_type_length || that_present_type_length) {
      if (!(this_present_type_length && that_present_type_length))
        return false;
      if (this.type_length != that.type_length)
        return false;
    }

    boolean this_present_freq_type = true && this.isSetFreq_type();
    boolean that_present_freq_type = true && that.isSetFreq_type();
    if (this_present_freq_type || that_present_freq_type) {
      if (!(this_present_freq_type && that_present_freq_type))
        return false;
      if (!this.freq_type.equals(that.freq_type))
        return false;
    }

    boolean this_present_frequencies = true && this.isSetFrequencies();
    boolean that_present_frequencies = true && that.isSetFrequencies();
    if (this_present_frequencies || that_present_frequencies) {
      if (!(this_present_frequencies && that_present_frequencies))
        return false;
      if (!this.frequencies.equals(that.frequencies))
        return false;
    }

    boolean this_present_converted_type = true && this.isSetConverted_type();
    boolean that_present_converted_type = true && that.isSetConverted_type();
    if (this_present_converted_type || that_present_converted_type) {
      if (!(this_present_converted_type && that_present_converted_type))
        return false;
      if (!this.converted_type.equals(that.converted_type))
        return false;
    }

    boolean this_present_scale = true && this.isSetScale();
    boolean that_present_scale = true && that.isSetScale();
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_precision = true && this.isSetPrecision();
    boolean that_present_precision = true && that.isSetPrecision();
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (this.precision != that.precision)
        return false;
    }

    boolean this_present_field_id = true && this.isSetField_id();
    boolean that_present_field_id = true && that.isSetField_id();
    if (this_present_field_id || that_present_field_id) {
      if (!(this_present_field_id && that_present_field_id))
        return false;
      if (this.field_id != that.field_id)
        return false;
    }

    boolean this_present_enum_values = true && this.isSetEnum_values();
    boolean that_present_enum_values = true && that.isSetEnum_values();
    if (this_present_enum_values || that_present_enum_values) {
      if (!(this_present_enum_values && that_present_enum_values))
        return false;
      if (!this.enum_values.equals(that.enum_values))
        return false;
    }

    boolean this_present_delta_object_type = true && this.isSetDelta_object_type();
    boolean that_present_delta_object_type = true && that.isSetDelta_object_type();
    if (this_present_delta_object_type || that_present_delta_object_type) {
      if (!(this_present_delta_object_type && that_present_delta_object_type))
        return false;
      if (!this.delta_object_type.equals(that.delta_object_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMeasurement_uid()) ? 131071 : 524287);
    if (isSetMeasurement_uid())
      hashCode = hashCode * 8191 + measurement_uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetType_length()) ? 131071 : 524287);
    if (isSetType_length())
      hashCode = hashCode * 8191 + type_length;

    hashCode = hashCode * 8191 + ((isSetFreq_type()) ? 131071 : 524287);
    if (isSetFreq_type())
      hashCode = hashCode * 8191 + freq_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFrequencies()) ? 131071 : 524287);
    if (isSetFrequencies())
      hashCode = hashCode * 8191 + frequencies.hashCode();

    hashCode = hashCode * 8191 + ((isSetConverted_type()) ? 131071 : 524287);
    if (isSetConverted_type())
      hashCode = hashCode * 8191 + converted_type.getValue();

    hashCode = hashCode * 8191 + ((isSetScale()) ? 131071 : 524287);
    if (isSetScale())
      hashCode = hashCode * 8191 + scale;

    hashCode = hashCode * 8191 + ((isSetPrecision()) ? 131071 : 524287);
    if (isSetPrecision())
      hashCode = hashCode * 8191 + precision;

    hashCode = hashCode * 8191 + ((isSetField_id()) ? 131071 : 524287);
    if (isSetField_id())
      hashCode = hashCode * 8191 + field_id;

    hashCode = hashCode * 8191 + ((isSetEnum_values()) ? 131071 : 524287);
    if (isSetEnum_values())
      hashCode = hashCode * 8191 + enum_values.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelta_object_type()) ? 131071 : 524287);
    if (isSetDelta_object_type())
      hashCode = hashCode * 8191 + delta_object_type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimeSeriesV30 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMeasurement_uid()).compareTo(other.isSetMeasurement_uid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurement_uid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurement_uid, other.measurement_uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType_length()).compareTo(other.isSetType_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type_length, other.type_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreq_type()).compareTo(other.isSetFreq_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreq_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freq_type, other.freq_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFrequencies()).compareTo(other.isSetFrequencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequencies, other.frequencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConverted_type()).compareTo(other.isSetConverted_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConverted_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.converted_type, other.converted_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField_id()).compareTo(other.isSetField_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_id, other.field_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnum_values()).compareTo(other.isSetEnum_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnum_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enum_values, other.enum_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDelta_object_type()).compareTo(other.isSetDelta_object_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelta_object_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta_object_type, other.delta_object_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimeSeriesV30(");
    boolean first = true;

    sb.append("measurement_uid:");
    if (this.measurement_uid == null) {
      sb.append("null");
    } else {
      sb.append(this.measurement_uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetType_length()) {
      if (!first) sb.append(", ");
      sb.append("type_length:");
      sb.append(this.type_length);
      first = false;
    }
    if (isSetFreq_type()) {
      if (!first) sb.append(", ");
      sb.append("freq_type:");
      if (this.freq_type == null) {
        sb.append("null");
      } else {
        sb.append(this.freq_type);
      }
      first = false;
    }
    if (isSetFrequencies()) {
      if (!first) sb.append(", ");
      sb.append("frequencies:");
      if (this.frequencies == null) {
        sb.append("null");
      } else {
        sb.append(this.frequencies);
      }
      first = false;
    }
    if (isSetConverted_type()) {
      if (!first) sb.append(", ");
      sb.append("converted_type:");
      if (this.converted_type == null) {
        sb.append("null");
      } else {
        sb.append(this.converted_type);
      }
      first = false;
    }
    if (isSetScale()) {
      if (!first) sb.append(", ");
      sb.append("scale:");
      sb.append(this.scale);
      first = false;
    }
    if (isSetPrecision()) {
      if (!first) sb.append(", ");
      sb.append("precision:");
      sb.append(this.precision);
      first = false;
    }
    if (isSetField_id()) {
      if (!first) sb.append(", ");
      sb.append("field_id:");
      sb.append(this.field_id);
      first = false;
    }
    if (isSetEnum_values()) {
      if (!first) sb.append(", ");
      sb.append("enum_values:");
      if (this.enum_values == null) {
        sb.append("null");
      } else {
        sb.append(this.enum_values);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("delta_object_type:");
    if (this.delta_object_type == null) {
      sb.append("null");
    } else {
      sb.append(this.delta_object_type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (measurement_uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'measurement_uid' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (delta_object_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'delta_object_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeSeriesV30StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesV30StandardScheme getScheme() {
      return new TimeSeriesV30StandardScheme();
    }
  }

  private static class TimeSeriesV30StandardScheme extends org.apache.thrift.scheme.StandardScheme<TimeSeriesV30> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSeriesV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEASUREMENT_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measurement_uid = iprot.readString();
              struct.setMeasurement_uidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type_length = iprot.readI32();
              struct.setType_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREQ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freq_type = cn.edu.tsinghua.tsfile.formatV30.FreqTypeV30.findByValue(iprot.readI32());
              struct.setFreq_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREQUENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.frequencies = new java.util.ArrayList<java.lang.Integer>(_list56.size);
                int _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readI32();
                  struct.frequencies.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setFrequenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONVERTED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.converted_type = cn.edu.tsinghua.tsfile.formatV30.ConvertedTypeV30.findByValue(iprot.readI32());
              struct.setConverted_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scale = iprot.readI32();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precision = iprot.readI32();
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field_id = iprot.readI32();
              struct.setField_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENUM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.enum_values = new java.util.ArrayList<java.lang.String>(_list59.size);
                java.lang.String _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = iprot.readString();
                  struct.enum_values.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setEnum_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DELTA_OBJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delta_object_type = iprot.readString();
              struct.setDelta_object_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSeriesV30 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.measurement_uid != null) {
        oprot.writeFieldBegin(MEASUREMENT_UID_FIELD_DESC);
        oprot.writeString(struct.measurement_uid);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetType_length()) {
        oprot.writeFieldBegin(TYPE_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.type_length);
        oprot.writeFieldEnd();
      }
      if (struct.freq_type != null) {
        if (struct.isSetFreq_type()) {
          oprot.writeFieldBegin(FREQ_TYPE_FIELD_DESC);
          oprot.writeI32(struct.freq_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.frequencies != null) {
        if (struct.isSetFrequencies()) {
          oprot.writeFieldBegin(FREQUENCIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.frequencies.size()));
            for (int _iter62 : struct.frequencies)
            {
              oprot.writeI32(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.converted_type != null) {
        if (struct.isSetConverted_type()) {
          oprot.writeFieldBegin(CONVERTED_TYPE_FIELD_DESC);
          oprot.writeI32(struct.converted_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScale()) {
        oprot.writeFieldBegin(SCALE_FIELD_DESC);
        oprot.writeI32(struct.scale);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrecision()) {
        oprot.writeFieldBegin(PRECISION_FIELD_DESC);
        oprot.writeI32(struct.precision);
        oprot.writeFieldEnd();
      }
      if (struct.isSetField_id()) {
        oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.field_id);
        oprot.writeFieldEnd();
      }
      if (struct.enum_values != null) {
        if (struct.isSetEnum_values()) {
          oprot.writeFieldBegin(ENUM_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enum_values.size()));
            for (java.lang.String _iter63 : struct.enum_values)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.delta_object_type != null) {
        oprot.writeFieldBegin(DELTA_OBJECT_TYPE_FIELD_DESC);
        oprot.writeString(struct.delta_object_type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeSeriesV30TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesV30TupleScheme getScheme() {
      return new TimeSeriesV30TupleScheme();
    }
  }

  private static class TimeSeriesV30TupleScheme extends org.apache.thrift.scheme.TupleScheme<TimeSeriesV30> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeSeriesV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.measurement_uid);
      oprot.writeI32(struct.type.getValue());
      oprot.writeString(struct.delta_object_type);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType_length()) {
        optionals.set(0);
      }
      if (struct.isSetFreq_type()) {
        optionals.set(1);
      }
      if (struct.isSetFrequencies()) {
        optionals.set(2);
      }
      if (struct.isSetConverted_type()) {
        optionals.set(3);
      }
      if (struct.isSetScale()) {
        optionals.set(4);
      }
      if (struct.isSetPrecision()) {
        optionals.set(5);
      }
      if (struct.isSetField_id()) {
        optionals.set(6);
      }
      if (struct.isSetEnum_values()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetType_length()) {
        oprot.writeI32(struct.type_length);
      }
      if (struct.isSetFreq_type()) {
        oprot.writeI32(struct.freq_type.getValue());
      }
      if (struct.isSetFrequencies()) {
        {
          oprot.writeI32(struct.frequencies.size());
          for (int _iter64 : struct.frequencies)
          {
            oprot.writeI32(_iter64);
          }
        }
      }
      if (struct.isSetConverted_type()) {
        oprot.writeI32(struct.converted_type.getValue());
      }
      if (struct.isSetScale()) {
        oprot.writeI32(struct.scale);
      }
      if (struct.isSetPrecision()) {
        oprot.writeI32(struct.precision);
      }
      if (struct.isSetField_id()) {
        oprot.writeI32(struct.field_id);
      }
      if (struct.isSetEnum_values()) {
        {
          oprot.writeI32(struct.enum_values.size());
          for (java.lang.String _iter65 : struct.enum_values)
          {
            oprot.writeString(_iter65);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeSeriesV30 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.measurement_uid = iprot.readString();
      struct.setMeasurement_uidIsSet(true);
      struct.type = cn.edu.tsinghua.tsfile.formatV30.DataTypeV30.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.delta_object_type = iprot.readString();
      struct.setDelta_object_typeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.type_length = iprot.readI32();
        struct.setType_lengthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.freq_type = cn.edu.tsinghua.tsfile.formatV30.FreqTypeV30.findByValue(iprot.readI32());
        struct.setFreq_typeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.frequencies = new java.util.ArrayList<java.lang.Integer>(_list66.size);
          int _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = iprot.readI32();
            struct.frequencies.add(_elem67);
          }
        }
        struct.setFrequenciesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.converted_type = cn.edu.tsinghua.tsfile.formatV30.ConvertedTypeV30.findByValue(iprot.readI32());
        struct.setConverted_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.scale = iprot.readI32();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.precision = iprot.readI32();
        struct.setPrecisionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.field_id = iprot.readI32();
        struct.setField_idIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.enum_values = new java.util.ArrayList<java.lang.String>(_list69.size);
          java.lang.String _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readString();
            struct.enum_values.add(_elem70);
          }
        }
        struct.setEnum_valuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

